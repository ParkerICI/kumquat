% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/citrus.classModel.R,
%   R/citrus.continuousModel.R, R/citrus.model.R
\name{citrus.buildEndpointModel}
\alias{citrus.buildEndpointModel}
\alias{citrus.buildModel.classification}
\alias{citrus.buildEndpointModel}
\alias{citrus.buildModel.continuous}
\alias{citrus.buildEndpointModel}
\alias{citrus.buildEndpointModel}
\alias{print.citrus.endpointModel}
\title{Build an endpoint model}
\usage{
citrus.buildModel.classification(features, labels, type,
  regularizationThresholds, ...)

citrus.buildModel.continuous(features, labels, type, regularizationThresholds,
  ...)

citrus.buildEndpointModel(features, labels, family = "classification",
  type = "pamr", regularizationThresholds = NULL, ...)

\method{print}{citrus.endpointModel}(citrus.endpointModel, ...)
}
\arguments{
\item{features}{A numeric matrix of predictive features. Rows are observations and column entries are features.}

\item{labels}{A vector of endpoint values (i.e. class labels) for each row of the feature matrix.}

\item{type}{Statistical model to be used. For \code{family="classification"}, options are \code{pamr} (Nearest Shrunken Centroid), \code{glmnet} (Lasso-regularized logistic regression), and \code{sam} (Non-parametric test in differences of means). For \code{family="continuous"}, options are \code{glmnet} (L1-regularized linear regression), and \code{sam}.}

\item{regularizationThresholds}{Vector of regularization values for penalized model construction. If \code{NULL}, values are automatically generated. Not valid for \code{sam} models.}

\item{...}{Other parameters passed to model-fitting procedures.}

\item{family}{Family of endpoint model to be constructed. Valid values are \code{classification} and \code{continuous}.}
}
\value{
An object of class \code{citrus.endpointModel} with properties:
\item{model}{The statistical model fit on supplied data.}
\item{regularizationThresholds}{Regularization Thresholds used to constrain penalized models.}
\item{family}{Family of model.}
\item{type}{Model type.}
}
\description{
This function constructs an endpoint model using features calculated by citrus.
}
\examples{
# Where the data lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example1")

# Create list of files to be analyzed
fileList = data.frame("unstim"=list.files(dataDirectory,pattern=".fcs"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# List of columns to be used for clustering
clusteringColumns = c("Red","Blue")

# Cluster data
citrus.clustering = citrus.cluster(citrus.combinedFCSSet,clusteringColumns)

# Large enough clusters
largeEnoughClusters = citrus.selectClusters(citrus.clustering)

# Build features
abundanceFeatures = citrus.calculateFeatures(citrus.combinedFCSSet,clusterAssignments=citrus.clustering$clusterMembership,clusterIds=largeEnoughClusters)

# List disease group of each sample
labels = factor(rep(c("Healthy","Diseased"),each=10))

# Build model
endpointModel = citrus.buildEndpointModel(abundanceFeatures,labels)
}
\author{
Robert Bruggner
}
