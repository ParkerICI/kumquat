% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/citrus.featureFunctions.R
\name{citrus.calculateFeatures}
\alias{citrus.calculateFeatures}
\title{Calculate descriptive cluster features}
\usage{
citrus.calculateFeatures(citrus.combinedFCSSet, clusterAssignments, clusterIds,
  featureType = "abundances", conditions = NULL, ...)
}
\arguments{
\item{citrus.combinedFCSSet}{A \code{citrus.combinedFCSSet} object.}

\item{clusterAssignments}{List of indicies of cluster assignments for each cluster.}

\item{clusterIds}{Vector of cluster ID's for which to calculate features.}

\item{featureType}{Type of feature to calculate. Valid options are: \code{abundances} and \code{medians}.
See \code{citrus.calculateFeature.*} functions for feature-type specific arguments.}

\item{conditions}{Vector of conditions for which to calculate features. See details.}

\item{...}{Other arguments passed to individual feature-calculation functions.}
}
\value{
Matrix of cluster features
}
\description{
Calculate descriptive properties for each cluster in each sample
}
\details{
If \code{conditions=NULL}, \code{citrus.calculateFeatures} constructs features for all samples 
in the \code{citrus.combinedFCSSet}. If \code{conditions} is a single element, \code{citrus.calculateFeatures} 
constructs features for samples in that condition. If \code{conditions} contains two elements, the first
condition is used as a baseline condition, the second is used as a comparison condition, and \code{citrus.calculateFeatures}
returns the difference in feature values between the comparison and baseline conditions.
}
\examples{
######################################################
# Calculate cluster abundances for single condition
######################################################
# Where the data lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example1")

# Create list of files to be analyzed
fileList = data.frame("unstim"=list.files(dataDirectory,pattern=".fcs"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# List of columns to be used for clustering
clusteringColumns = c("Red","Blue")

# Cluster data
citrus.clustering = citrus.cluster(citrus.combinedFCSSet,clusteringColumns)

# Large enough clusters
largeEnoughClusters = citrus.selectClusters(citrus.clustering)

# Build features
abundanceFeatures = citrus.calculateFeatures(citrus.combinedFCSSet,clusterAssignments=citrus.clustering$clusterMembership,clusterIds=largeEnoughClusters)


######################################################
# Calculate median levels of functional markers in 
# stimulated conditions relative to unstimluated
# condtion 
######################################################
# Where the data Lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example2")

# Create list of files to be analyzed
fileList = data.frame(unstim=list.files(dataDirectory,pattern="unstim"),stim1=list.files(dataDirectory,pattern="stim1"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# Vector of parameters to be used for clustering
clusteringColumns = c("LineageMarker1","LineageMarker2")

# Vector of parameters to calculate medians for
functionalColumns = c("FunctionalMarker1","FunctionalMarker2")

# Cluster data
citrus.clustering = citrus.cluster(citrus.combinedFCSSet,clusteringColumns)

# Large enough clusters
largeEnoughClusters = citrus.selectClusters(citrus.clustering)

# Build features
medianDifferenceFeatures = citrus.calculateFeatures(citrus.combinedFCSSet,
                                                clusterAssignments=citrus.clustering$clusterMembership,
                                                clusterIds=largeEnoughClusters,
                                                featureType="medians",
                                                medianColumns=functionalColumns,
                                                conditions=c("unstim","stim1"))
}
\author{
Robert Bruggner
}
\seealso{
\code{citrus.calculateFeature.type}
}

