% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/citrus.classModel.R,
%   R/citrus.continuousModel.R, R/citrus.model.R
\name{citrus.generateRegularizationThresholds}
\alias{citrus.generateRegularizationThresholds}
\alias{citrus.generateRegularizationThresholds.classification}
\alias{citrus.generateRegularizationThresholds}
\alias{citrus.generateRegularizationThresholds.continuous}
\alias{citrus.generateRegularizationThresholds}
\title{Generate model regularization thresholds}
\usage{
citrus.generateRegularizationThresholds.classification(features, labels,
  modelType, n = 100, ...)

citrus.generateRegularizationThresholds.continuous(features, labels, modelType,
  n = 100, ...)

citrus.generateRegularizationThresholds(features, labels, modelType, family,
  n = 100, ...)
}
\arguments{
\item{features}{Features used to construct model}

\item{labels}{Endpoint lables for samples and features}

\item{modelType}{Method used to construct endpoint model. Valid options are: \code{pamr} and \code{glmnet}.}

\item{n}{Number of regularization thresholds to generate}

\item{...}{Other arguments passed to model-fitting methods}

\item{family}{Model family. Valid options are: \code{classification} and \code{continuous}.}
}
\value{
A vector of regularization threshold values.
}
\description{
Generate a range of regularization thresholds for model construction
}
\examples{
# Where the data lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example1")

# Create list of files to be analyzed
fileList = data.frame("unstim"=list.files(dataDirectory,pattern=".fcs"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# List of columns to be used for clustering
clusteringColumns = c("Red","Blue")

# Cluster data
citrus.clustering = citrus.cluster(citrus.combinedFCSSet,clusteringColumns)

# Large enough clusters
largeEnoughClusters = citrus.selectClusters(citrus.clustering)

# Build features
abundanceFeatures = citrus.calculateFeatures(citrus.combinedFCSSet,clusterAssignments=citrus.clustering$clusterMembership,clusterIds=largeEnoughClusters)

# List disease group of each sample
labels = factor(rep(c("Healthy","Diseased"),each=10))

# Calculate regularization thresholds
regularizationThresholds = citrus.generateRegularizationThresholds(abundanceFeatures,labels,modelType="pamr",family="classification")
}
\author{
Robert Bruggner
}
