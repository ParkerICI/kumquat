% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/citrus.classModel.R, R/citrus.continuousModel.R, R/citrus.model.R
\name{citrus.thresholdCVs}
\alias{citrus.thresholdCVs}
\alias{citrus.thresholdCVs.quick}
\alias{citrus.thresholdCVs.quick.classification}
\alias{citrus.thresholdCVs.quick.continuous}
\title{Calculate model error rates}
\usage{
citrus.thresholdCVs.quick.classification(modelType, features, labels,
  regularizationThresholds, nCVFolds = 10, ...)

citrus.thresholdCVs.quick.continuous(modelType, features, labels,
  regularizationThresholds, nCVFolds = 10, ...)

citrus.thresholdCVs(modelType, foldFeatures, labels, regularizationThresholds,
  family, folds, foldModels, leftoutFeatures, ...)

citrus.thresholdCVs.quick(modelType, features, labels, regularizationThresholds,
  family, nCVFolds = 10, ...)
}
\arguments{
\item{modelType}{Type of model to be constructed. Valid options are: \code{pamr} and \code{glmnet}.}

\item{features}{Features calculated from a clustering of all samples.}

\item{labels}{Endpoint labels of clustered samples.}

\item{regularizationThresholds}{Thresholds for model regularization.}

\item{nCVFolds}{Number of folds for quick cross-validation.}

\item{...}{Other parameters passsed to model-fitting methods.}

\item{foldFeatures}{List of features with each entry containing features from an independent clustering.}

\item{family}{Model family. Valid options are \code{classification} and \code{continuous}.}

\item{folds}{List of fold indices}

\item{foldModels}{Models constructed from each fold of features.}

\item{leftoutFeatures}{Features calculated for leftout samples mapped to clustered data space.}
}
\value{
Matrix of model error rates, standard error of error estimates, and false discovery rates (if possible) at 
supplied regularization thresholds.
}
\description{
Calculate model error rates at different regularization thresholds.
}
\details{
If independent fold-clustering and fold-features are calculated, use \code{citrus.thresholdCVs}. 
If features are derived from a clustering of all samples together, use \code{citrus.thresholdCVs.quick}. See examples.
}
\examples{
########################################
# Example of citrus.thresholdCVs.quick
########################################
# Where the data lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example1")

# Create list of files to be analyzed
fileList = data.frame("unstim"=list.files(dataDirectory,pattern=".fcs"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# List of columns to be used for clustering
clusteringColumns = c("Red","Blue")

# Cluster data
citrus.clustering = citrus.cluster(citrus.combinedFCSSet,clusteringColumns)

# Large enough clusters
largeEnoughClusters = citrus.selectClusters(citrus.clustering)

# Build features
abundanceFeatures = citrus.calculateFeatures(citrus.combinedFCSSet,clusterAssignments=citrus.clustering$clusterMembership,clusterIds=largeEnoughClusters)

# List disease group of each sample
labels = factor(rep(c("Healthy","Diseased"),each=10))

# Calculate regularization thresholds
regularizationThresholds = citrus.generateRegularizationThresholds.classification(abundanceFeatures,labels,modelType="pamr")

# Calculate CV Error rates
thresholdCVRates = citrus.thresholdCVs.quick("pamr",abundanceFeatures,labels,regularizationThresholds,family="classification") 

########################################
# Example of citrus.thresholdCVs
########################################
# Where the data lives
dataDirectory = file.path(system.file(package = "citrus"),"extdata","example1")

# Create list of files to be analyzed
fileList = data.frame("unstim"=list.files(dataDirectory,pattern=".fcs"))

# Read the data 
citrus.combinedFCSSet = citrus.readFCSSet(dataDirectory,fileList)

# List disease group of each sample
labels = factor(rep(c("Healthy","Diseased"),each=10))

# List of columns to be used for clustering
clusteringColumns = c("Red","Blue")

# Cluster each fold
citrus.foldClustering = citrus.clusterAndMapFolds(citrus.combinedFCSSet,clusteringColumns,labels,nFolds=4)

# Build fold features and leftout features
citrus.foldFeatureSet = citrus.calculateFoldFeatureSet(citrus.foldClustering,citrus.combinedFCSSet)

# Build fold models 
citrus.foldModels = citrus.buildFoldsEndpointModels(type="pamr",citrus.foldFeatureSet,labels)

citrus.thresholdCVs(modelType="pamr",
                    foldFeatures=citrus.foldFeatureSet$foldFeatures,
                    labels=labels,
                    regularizationThresholds=citrus.foldModels[[1]]$regularizationThresholds,
                    family="classification",
                    folds=citrus.foldFeatureSet$folds,
                    foldModels=citrus.foldModels,
                    leftoutFeatures=citrus.foldFeatureSet$leftoutFeatures)
}
\author{
Robert Bruggner
}

